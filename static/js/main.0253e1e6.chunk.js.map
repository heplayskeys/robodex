{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","redux/search/search.types.js","components/search-input/search-input.component.jsx","redux/search/search.actions.js","components/scroll/scroll-component.jsx","components/error-boundary/error-boundary.component.jsx","redux/robots/robots.types.js","containers/App.js","redux/robots/robots.actions.js","serviceWorker.js","redux/search/search.reducer.js","redux/robots/robots.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Card","email","name","className","src","alt","CardList","users","map","user","key","id","SearchActionTypes","connect","dispatch","setText","e","text","target","value","type","payload","props","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","state","hasError","err","info","this","setState","Component","robotsActionTypes","search","getRobots","isPending","error","getRobotUsers","fetch","then","res","json","data","catch","useEffect","userArray","filter","toLowerCase","includes","Boolean","window","location","hostname","match","INITIAL_STATE","searchReducer","action","getRobotsReducer","rootReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0253e1e6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ email, name }) => {\n\treturn (\n\t\t<div className='tc bg-light-blue ma2 dib br3 grow shadow-5 w-80 w-30-ns pa2 w-80-m'>\n\t\t\t<img\n\t\t\t\tclassName='br-100 pa1 ba b--black-10 h4 w4'\n\t\t\t\tsrc={`https://robohash.org/${email}?bgset=any`}\n\t\t\t\talt={`${name}`}\n\t\t\t/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card-component';\n\nconst CardList = ({ users }) => {\n\treturn (\n\t\t<div>\n\t\t\t{users.map(user => (\n\t\t\t\t<Card key={user.id} email={user.email} name={user.name} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","export const SearchActionTypes = {\n\tCHANGE_SEARCH_FIELD: 'CHANGE_SEARCH_FIELD'\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField } from '../../redux/search/search.actions';\n\nconst SearchInput = props => {\n\tconst { setText } = props;\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa2 ba b--light-blue bg-lightest-blue br2 mb3'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search Robodex'\n\t\t\t\tonChange={setText}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nconst mapDispatchToProps = dispatch => ({\n\tsetText: e => dispatch(setSearchField(e.target.value))\n});\n\nexport default connect(null, mapDispatchToProps)(SearchInput);\n","import { SearchActionTypes } from './search.types';\n\nexport const setSearchField = text => ({\n\ttype: SearchActionTypes.CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tborder: '2px solid black',\n\t\t\t\theight: '75vh'\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch(err, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops! Something went wrong!</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n","export const robotsActionTypes = {\n\tGET_ROBOTS_PENDING: 'GET_ROBOTS_PENDING',\n\tGET_ROBOTS_SUCCESS: 'GET_ROBOTS_SUCCESS',\n\tGET_ROBOTS_FAILED: 'GET_ROBOTS_FAILED'\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/card-list/card-list.component';\nimport SearchInput from '../components/search-input/search-input.component';\nimport Scroll from '../components/scroll/scroll-component';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\nimport { requestRobots } from '../redux/robots/robots.actions';\nimport './App.css';\n\nconst App = props => {\n\tconst { text, users, isPending, getRobotUsers } = props;\n\n\tuseEffect(() => {\n\t\tgetRobotUsers();\n\t}, [getRobotUsers]);\n\n\tconst userArray = text\n\t\t? users.filter(user => user.name.toLowerCase().includes(text.toLowerCase()))\n\t\t: users;\n\n\treturn !isPending ? (\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>Robodex</h1>\n\t\t\t<SearchInput />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList users={userArray} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t</Scroll>\n\t\t\t<h4 className='f5'>&copy; 2020 heplayskeys</h4>\n\t\t</div>\n\t) : (\n\t\t<div className='tc'>\n\t\t\t<h1 className='f2'>Loading Robots...</h1>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => ({\n\ttext: state.search.text,\n\tusers: state.getRobots.users,\n\tisPending: state.getRobots.isPending,\n\terror: state.getRobots.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tgetRobotUsers: () => dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { robotsActionTypes } from './robots.types';\n\nexport const requestRobots = () => dispatch => {\n\tdispatch({ type: robotsActionTypes.GET_ROBOTS_PENDING });\n\treturn fetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(res => res.json())\n\t\t.then(data =>\n\t\t\tdispatch({ type: robotsActionTypes.GET_ROBOTS_SUCCESS, payload: data })\n\t\t)\n\t\t.catch(error =>\n\t\t\tdispatch({ type: robotsActionTypes.GET_ROBOTS_FAILED, payload: error })\n\t\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SearchActionTypes } from './search.types';\n\nconst INITIAL_STATE = {\n\ttext: ''\n};\n\nconst searchReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase SearchActionTypes.CHANGE_SEARCH_FIELD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttext: action.payload\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default searchReducer;\n","import { robotsActionTypes } from './robots.types';\n\nconst INITIAL_STATE = {\n\tusers: [],\n\terror: '',\n\tisPending: false\n};\n\nexport const getRobotsReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase robotsActionTypes.GET_ROBOTS_PENDING:\n\t\t\treturn { ...state, isPending: true };\n\n\t\tcase robotsActionTypes.GET_ROBOTS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tusers: action.payload,\n\t\t\t\tisPending: false\n\t\t\t};\n\n\t\tcase robotsActionTypes.GET_ROBOTS_FAILED:\n\t\t\treturn { ...state, error: action.payload, isPending: false };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default getRobotsReducer;\n","import { combineReducers } from 'redux';\nimport searchReducer from './search/search.reducer';\nimport getRobotsReducer from './robots/robots.reducer';\n\nconst rootReducer = combineReducers({\n\tsearch: searchReducer,\n\tgetRobots: getRobotsReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [thunkMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n\tmiddlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './redux/store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}