{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-input/search-input.component.jsx","components/scroll/scroll-component.jsx","components/error-boundary/error-boundary.component.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","email","name","className","src","alt","CardList","users","map","user","key","id","SearchInput","props","setText","type","placeholder","onChange","e","target","value","Scroll","children","style","overflowY","border","height","ErrorBoundary","state","hasError","err","info","this","setState","Component","App","useState","text","setUsers","useEffect","fetch","then","res","json","usersRes","userArray","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uMAkBeA,EAhBF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtB,OACC,yBAAKC,UAAU,sEACd,yBACCA,UAAU,kCACVC,IAAG,+BAA0BH,EAA1B,cACHI,IAAG,UAAKH,KAET,6BACC,4BAAKA,GACL,2BAAID,MCCOK,EAVE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACC,6BACEA,EAAMC,KAAI,SAAAC,GAAI,OACd,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIV,MAAOQ,EAAKR,MAAOC,KAAMO,EAAKP,YCSvCU,EAdK,SAAAC,GAAU,IACrBC,EAAYD,EAAZC,QACR,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,gDACVY,KAAK,SACLC,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOC,YCMrBC,EAdA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACC,yBACCC,MAAO,CACNC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAGRJ,I,4BCWWK,E,kDAnBd,WAAYd,GAAQ,IAAD,8BAClB,cAAMA,IACDe,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAKC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,2DAEDG,KAAKnB,MAAMS,a,GAhBQY,aCwCbC,G,MAnCH,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJvB,EADI,OAESsB,mBAAS,IAFlB,mBAEV7B,EAFU,KAEH+B,EAFG,KAIjBC,qBAAU,WAERC,MAAM,8CACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAQ,OAAIN,EAASM,QAG3B,CAACrC,IAEJ,IAAMsC,EAAYR,EACf9B,EAAMuC,QAAO,SAAArC,GAAI,OAAIA,EAAKP,KAAK6C,cAAcC,SAASX,EAAKU,kBAC3DxC,EAEH,OAAOA,EAAM0C,OACZ,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAaW,QAASA,IACtB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUP,MAAOsC,MAGnB,wBAAI1C,UAAU,MAAd,0BAGD,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,wB,MCzBiB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b368ad0e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ email, name }) => {\n\treturn (\n\t\t<div className='tc bg-light-blue ma2 dib br3 grow shadow-5 w-80 w-30-ns pa2 w-80-m'>\n\t\t\t<img\n\t\t\t\tclassName='br-100 pa1 ba b--black-10 h4 w4'\n\t\t\t\tsrc={`https://robohash.org/${email}?bgset=any`}\n\t\t\t\talt={`${name}`}\n\t\t\t/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card-component';\n\nconst CardList = ({ users }) => {\n\treturn (\n\t\t<div>\n\t\t\t{users.map(user => (\n\t\t\t\t<Card key={user.id} email={user.email} name={user.name} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchInput = props => {\n\tconst { setText } = props;\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa2 ba b--light-blue bg-lightest-blue br2 mb3'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search Robodex'\n\t\t\t\tonChange={e => setText(e.target.value)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchInput;\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tborder: '2px solid black',\n\t\t\t\theight: '75vh'\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch(err, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops! Something went wrong!</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/card-list/card-list.component';\nimport SearchInput from '../components/search-input/search-input.component';\nimport Scroll from '../components/scroll/scroll-component';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\nimport './App.css';\n\nconst App = () => {\n\tconst [text, setText] = useState('');\n\tconst [users, setUsers] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst getUsers = () => {\n\t\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(usersRes => setUsers(usersRes));\n\t\t};\n\t\tgetUsers();\n\t}, [users]);\n\n\tconst userArray = text\n\t\t? users.filter(user => user.name.toLowerCase().includes(text.toLowerCase()))\n\t\t: users;\n\n\treturn users.length ? (\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>Robodex</h1>\n\t\t\t<SearchInput setText={setText} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList users={userArray} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t</Scroll>\n\t\t\t<h4 className='f5'>&copy; 2020 heplayskeys</h4>\n\t\t</div>\n\t) : (\n\t\t<div className='tc'>\n\t\t\t<h1 className='f2'>Loading Robots...</h1>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}